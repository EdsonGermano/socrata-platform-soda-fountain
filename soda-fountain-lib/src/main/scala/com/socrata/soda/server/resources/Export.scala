package com.socrata.soda.server.resources

import com.rojoma.json.v3.ast.JString
import com.socrata.http.common.util.ContentNegotiation

import com.socrata.soda.server._
import com.socrata.http.server.HttpRequest
import com.socrata.http.server.implicits._
import com.socrata.http.server.responses._
import com.socrata.http.server.routing.OptionallyTypedPathComponent
import com.socrata.http.server.util.{Precondition, EntityTag, RequestId}
import com.socrata.soda.server.copy.Stage
import com.socrata.soda.server.errors._
import com.socrata.soda.server.export.Exporter
import com.socrata.soda.server.highlevel.ExportDAO.{ColumnInfo, CSchema}
import com.socrata.soda.server.highlevel.{ExportParam, ColumnSpecUtils, ExportDAO}
import com.socrata.soda.server.id.ResourceName
import com.socrata.soda.server.util.ETagObfuscator
import java.nio.charset.StandardCharsets
import java.security.MessageDigest
import javax.servlet.http.{HttpServletRequest, HttpServletResponse}

case class Export(exportDAO: ExportDAO, etagObfuscator: ETagObfuscator) {
  val log = org.slf4j.LoggerFactory.getLogger(classOf[Export])

  implicit val contentNegotiation = new ContentNegotiation(Exporter.exporters.map { exp => exp.mimeType -> exp.extension }, List("en-US"))

  val headerHashAlg = "SHA1"
  val headerHashLength = MessageDigest.getInstance(headerHashAlg).getDigestLength
  def headerHash(req: HttpRequest) = {
    val hash = MessageDigest.getInstance(headerHashAlg)
    import com.socrata.http.server.HttpRequest.HttpRequestApi
    val reqApi = new HttpRequestApi(req)

    hash.update(reqApi.queryStr.toString.getBytes(StandardCharsets.UTF_8))
    hash.update(255.toByte)
    for(field <- ContentNegotiation.headers) {
      hash.update(field.getBytes(StandardCharsets.UTF_8))
      hash.update(254.toByte)
      for(elem <- reqApi.headers(field)) {
        hash.update(elem.getBytes(StandardCharsets.UTF_8))
        hash.update(254.toByte)
      }
      hash.update(255.toByte)
    }
    hash.digest()
  }

  def export(resourceName: ResourceName, ext: Option[String])(req: HttpRequest)(resp: HttpServletResponse) {
    exportCopy(resourceName, "published", ext)(req)(resp)
  }

  def exportCopy(resourceName: ResourceName, copy: String, ext: Option[String])(req: HttpRequest)(resp: HttpServletResponse) {
    // Etags generated by this system are the obfuscation of the etag from upstream plus
    // the hash of the contents of the header fields naemd by ContentNegotiation.headers.
    // So, when we receive etags in an if-none-match from the client
    //   1. decrypt the tags
    //   2. extract our bit of the data
    //   3. hash our headers and compare, dropping the etag completely if the hash is different
    //   4. Passing the remaining (decrypted and hash-stripped) etags upstream.
    //
    // For if-match it's the same, only we KEEP the ones that match the hash (and if that eliminates
    // all of them, then we "expectation failed" before ever passing upward to the data-coordinator)
    val limit = Option(req.getParameter("limit")).map { limStr =>
      try {
        limStr.toLong
      } catch {
        case e: NumberFormatException =>
          SodaUtils.errorResponse(req, BadParameter("limit", limStr))(resp)
          return
      }
    }

    val offset = Option(req.getParameter("offset")).map { offStr =>
      try {
        offStr.toLong
      } catch {
        case e: NumberFormatException =>
          SodaUtils.errorResponse(req, BadParameter("offset", offStr))(resp)
          return
      }
    }

    val excludeSystemFields = Option(req.getParameter("exclude_system_fields")).map { paramStr =>
      try {
        paramStr.toBoolean
      } catch {
        case e: Exception =>
          SodaUtils.errorResponse(req, BadParameter("exclude_system_fields", paramStr))(resp)
          return
      }
    }.getOrElse(true)

    // Excluding system columns is done by explicitly select all non-system columns.
    val reqColumns = Option(req.getParameter("columns")).orElse(if (excludeSystemFields) Some("*") else None)

    // get only these columns, we expect these to be fieldnames comma separated items.
    val columnsOnly = reqColumns.map {
      paramStr =>
        try {
          exportDAO.lookupDataset(resourceName, Stage(copy)) match {
            case Some(ds) => {
              val pkColumnId = ds.primaryKey
              val columns = ds.columns
              if (paramStr != "*") {
                val columnFields = paramStr.toLowerCase.split(",").toSeq.map(x => x.trim)
                // need to have the row-identifier included otherwise dc will fail
                // this may seem long winded but helps avoid double counting in case one of requested
                // columns is the row-identifier
                val pkColumn = columns.filter { c => c.id.underlying == pkColumnId.underlying}.map { c => c.fieldName.name}
                val columnFieldsWithRowIdSet = (columnFields ++ pkColumn).toSet
                val filtered = columns.filter { c => columnFieldsWithRowIdSet.contains(c.fieldName.name)}

                if (filtered.length != columnFieldsWithRowIdSet.size) {
                  SodaUtils.errorResponse(req, BadParameter("could not find columns requested.", paramStr))(resp)
                  return
                }
                filtered
              } else {
                columns.filter(c => !ColumnSpecUtils.isSystemColumn(c.fieldName) || c.id.underlying == pkColumnId.underlying)
              }
            }
            case None => 
              SodaUtils.errorResponse(req, DatasetNotFound(resourceName))(resp)
              return
          }
        } catch {
          case e: Exception =>
            SodaUtils.errorResponse(req, BadParameter("error locating columns requested", paramStr))(resp)
            return
        }
    }.getOrElse(Seq.empty)

    val ifModifiedSince = req.dateTimeHeader("If-Modified-Since")

    val sorted = Option(req.getParameter("sorted")).map {
      case "true" => true
      case "false" => false
      case other => return SodaUtils.errorResponse(req, BadParameter("sorted", other))(resp)
    }.getOrElse(true)

    val rowId = Option(req.getParameter("row_id"))

    val param = ExportParam(limit, offset, columnsOnly, ifModifiedSince, sorted, rowId)
    exportCopy(resourceName,
               copy,
               ext,
               excludeSystemFields,
               param,
               false)(req)(resp)
  }

  def exportCopy(resourceName: ResourceName,
                 copy: String,
                 ext: Option[String],
                 excludeSystemFields: Boolean,
                 param: ExportParam,
                 singleRow: Boolean)
                (req: HttpRequest)(resp: HttpServletResponse) {
    // Etags generated by this system are the obfuscation of the etag from upstream plus
    // the hash of the contents of the header fields naemd by ContentNegotiation.headers.
    // So, when we receive etags in an if-none-match from the client
    //   1. decrypt the tags
    //   2. extract our bit of the data
    //   3. hash our headers and compare, dropping the etag completely if the hash is different
    //   4. Passing the remaining (decrypted and hash-stripped) etags upstream.
    //
    // For if-match it's the same, only we KEEP the ones that match the hash (and if that eliminates
    // all of them, then we "expectation failed" before ever passing upward to the data-coordinator)
    val suffix = headerHash(req)
    val precondition = req.precondition.map(etagObfuscator.deobfuscate)
    def prepareTag(etag: EntityTag) = etagObfuscator.obfuscate(etag.append(suffix))
    precondition.filter(_.endsWith(suffix)) match {
      case Right(newPrecondition) =>
        val passOnPrecondition = newPrecondition.map(_.dropRight(suffix.length))
        req.negotiateContent match {
          case Some((mimeType, charset, language)) =>
            val exporter = Exporter.exportForMimeType(mimeType)
            exportDAO.export(resourceName,
                             exporter.validForSchema,
                             passOnPrecondition,
                             copy,
                             param,
                             requestId = RequestId.getFromRequest(req)) {
              case ExportDAO.Success(schema, newTag, rows) =>
                resp.setStatus(HttpServletResponse.SC_OK)
                resp.setHeader("Vary", ContentNegotiation.headers.mkString(","))
                newTag.foreach { tag =>
                  ETag(prepareTag(tag))(resp)
                }
                exporter.export(resp, charset, schema, rows, singleRow)
              case ExportDAO.PreconditionFailed =>
                SodaUtils.errorResponse(req, EtagPreconditionFailed)(resp)
              case ExportDAO.NotModified(etags) =>
                SodaUtils.errorResponse(req, ResourceNotModified(etags.map(prepareTag),
                  Some(ContentNegotiation.headers.mkString(","))
                ))(resp)
              case ExportDAO.SchemaInvalidForMimeType =>
                SodaUtils.errorResponse(req, SchemaInvalidForMimeType)(resp)
              case ExportDAO.NotFound(x) =>
                SodaUtils.errorResponse(req, GeneralNotFoundError(x.toString()))(resp)
              case ExportDAO.InvalidRowId =>
                SodaUtils.errorResponse(req, InvalidRowId)(resp)
              case ExportDAO.InternalServerError(code, tag, data) =>
                SodaUtils.errorResponse(req, InternalError(tag,
                  "code"  -> JString(code),
                  "data" -> JString(data)
                ))(resp)
            }
          case None =>
            // TODO better error
            NotAcceptable(resp)
        }
      case Left(Precondition.FailedBecauseNoMatch) =>
        SodaUtils.errorResponse(req, EtagPreconditionFailed)(resp)
    }
  }

  case class publishedService(resourceAndExt: OptionallyTypedPathComponent[ResourceName]) extends SodaResource {
    override def get = export(resourceAndExt.value, resourceAndExt.extension.map(Exporter.canonicalizeExtension))
  }

  case class service(resource: ResourceName, copyAndExt: OptionallyTypedPathComponent[String]) extends SodaResource {
    override def get = exportCopy(resource, copyAndExt.value, copyAndExt.extension.map(Exporter.canonicalizeExtension))
  }

  def extensions(s: String) = Exporter.exporterExtensions.contains(Exporter.canonicalizeExtension(s))
}
