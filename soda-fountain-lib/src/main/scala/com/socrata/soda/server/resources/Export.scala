package com.socrata.soda.server.resources

import java.util.Locale

import com.socrata.http.server.routing.OptionallyTypedPathComponent
import com.socrata.soda.server.id.ResourceName
import com.socrata.soda.server.highlevel.ExportDAO
import com.socrata.soql.types.SoQLValue
import javax.servlet.http.{HttpServletRequest, HttpServletResponse}
import com.socrata.soda.server.SodaUtils
import com.rojoma.simplearm.util._
import com.rojoma.json.ast.{JNull, JString}
import com.rojoma.json.io.CompactJsonWriter
import com.socrata.soda.server.wiremodels.{CsvColumnRep, CsvColumnWriteRep, JsonColumnRep, JsonColumnWriteRep}
import java.io.BufferedWriter
import javax.activation.MimeType
import com.socrata.http.common.util.{AliasedCharset, ContentNegotiation}
import com.socrata.http.server.implicits._
import com.socrata.http.server.responses._
import com.rojoma.json.codec.JsonCodec
import com.socrata.soda.server.util.AdditionalJsonCodecs._
import com.socrata.soda.server.util.ETagObfuscator
import java.security.MessageDigest
import java.nio.charset.StandardCharsets
import org.apache.commons.codec.binary.Base64
import com.socrata.http.server.util.{Precondition, StrongEntityTag, WeakEntityTag, EntityTag}
import com.socrata.soda.server.errors.{BadParameter, ResourceNotModified, EtagPreconditionFailed}
import com.socrata.soda.server.export.{Exporter, CsvExporter, CJsonExporter, JsonExporter}

case class Export(exportDAO: ExportDAO, etagObfuscator: ETagObfuscator) {
  val log = org.slf4j.LoggerFactory.getLogger(classOf[Export])

  implicit val contentNegotiation = new ContentNegotiation(Exporter.exporters.map { exp => exp.mimeType -> exp.extension }, List("en-US"))

  def headerHash(req: HttpServletRequest) = {
    val hash = MessageDigest.getInstance("SHA1")
    hash.update(Option(req.getQueryString).toString.getBytes(StandardCharsets.UTF_8))
    hash.update(255.toByte)
    for(field <- ContentNegotiation.headers) {
      hash.update(field.getBytes(StandardCharsets.UTF_8))
      hash.update(254.toByte)
      for(elem <- req.headers(field)) {
        hash.update(elem.getBytes(StandardCharsets.UTF_8))
        hash.update(254.toByte)
      }
      hash.update(255.toByte)
    }
    Base64.encodeBase64URLSafeString(hash.digest())
  }

  def export(resourceName: ResourceName, ext: Option[String])(req: HttpServletRequest)(resp: HttpServletResponse) {
    // Etags generated by this system are the obfuscation of the etag from upstream plus
    // the hash of the contents of the header fields naemd by ContentNegotiation.headers.
    // So, when we receive etags in an if-none-match from the client
    //   1. decrypt the tags
    //   2. extract our bit of the data
    //   3. hash our headers and compare, dropping the etag completely if the hash is different
    //   4. Passing the remaining (decrypted and hash-stripped) etags upstream.
    //
    // For if-match it's the same, only we KEEP the ones that match the hash (and if that eliminates
    // all of them, then we "expectation failed" before ever passing upward to the data-coordinator)
    val limit = Option(req.getParameter("limit")).map { limStr =>
      try {
        limStr.toLong
      } catch {
        case e: NumberFormatException =>
          SodaUtils.errorResponse(req, BadParameter("limit", limStr))(resp)
          return
      }
    }

    val offset = Option(req.getParameter("offset")).map { offStr =>
      try {
        offStr.toLong
      } catch {
        case e: NumberFormatException =>
          SodaUtils.errorResponse(req, BadParameter("offset", offStr))(resp)
          return
      }
    }

    val suffix = "+" + headerHash(req)
    val precondition = req.precondition.map(etagObfuscator.deobfuscate)
    def prepareTag(etag: EntityTag) = etagObfuscator.obfuscate(etag.map(_ + suffix))
    precondition.filter(_.value.endsWith(suffix)) match {
      case Right(newPrecondition) =>
        val passOnPrecondition = newPrecondition.map(_.map(_.dropRight(suffix.length)))
        req.negotiateContent match {
          case Some((mimeType, charset, language)) =>
            val exporter = Exporter.exportForMimeType(mimeType)
            exportDAO.export(resourceName, passOnPrecondition, limit, offset) {
              case ExportDAO.Success(schema, newTag, rows) =>
                resp.setStatus(HttpServletResponse.SC_OK)
                resp.setHeader("Vary", ContentNegotiation.headers.mkString(","))
                newTag.foreach { tag =>
                  resp.setHeader("ETag", prepareTag(tag).toString)
                }
                exporter.export(resp, charset, schema, rows)
              case ExportDAO.PreconditionFailed =>
                SodaUtils.errorResponse(req, EtagPreconditionFailed)(resp)
              case ExportDAO.NotModified(etags) =>
                SodaUtils.errorResponse(req, ResourceNotModified(etags.map(prepareTag), Some(ContentNegotiation.headers.mkString(","))))(resp)
            }
          case None =>
            // TODO better error
            NotAcceptable(resp)
        }
      case Left(Precondition.FailedBecauseMatch(etags)) =>
        SodaUtils.errorResponse(req, ResourceNotModified(etags.map(prepareTag), Some(ContentNegotiation.headers.mkString(","))))(resp)
      case Left(Precondition.FailedBecauseNoMatch) =>
        SodaUtils.errorResponse(req, EtagPreconditionFailed)(resp)
    }
  }

  case class service(resourceAndExt: OptionallyTypedPathComponent[ResourceName]) extends SodaResource {
    override def get = export(resourceAndExt.value, resourceAndExt.extension.map(Exporter.canonicalizeExtension))
  }

  def extensions(s: String) = Exporter.exporterExtensions.contains(Exporter.canonicalizeExtension(s))
}
